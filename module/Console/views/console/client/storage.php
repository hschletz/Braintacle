<?php

/**
 * Display storage information
 *
 * Copyright (C) 2011-2022 Holger Schletz <holger.schletz@web.de>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

print $this->clientHeader($this->client);

$client = $this->client;


// Display storage devices

$headers = array(
    'ProductFamily' => $this->translate('Product family'),
    'ProductName' => $this->translate('Model'),
    'Type' => $this->translate('Type'),
    'Size' => $this->translate('Size'),
    'Device' => $this->translate('Device'),
    'Serial' => $this->translate('Serial number'),
    'Firmware' => $this->translate('Firmware version'),
);

$renderSize = function ($view, $object, $property) {
    $size = $object[$property];
    if ($object['Size']) { // Ignore objects with no total size
        $output = $view->numberFormat($size / 1024, \NumberFormatter::DECIMAL, \NumberFormatter::TYPE_DOUBLE, null, 1);
        $output .= "\xC2\xA0GB";
        if ($property != 'Size') {
            $output .= sprintf(
                ' (%s)',
                $view->numberFormat(
                    $size / $object['Size'],
                    \NumberFormatter::PERCENT,
                    \NumberFormatter::TYPE_DOUBLE,
                    null,
                    0
                )
            );
        }
        return $view->escapeHtml($output);
    }
};

$renderCallbacks = array('Size' => $renderSize);

if ($client['Windows']) {
    unset($headers['ProductFamily']); // not available
    unset($headers['Device']); // available, but not very interesting
    $renderCallbacks['Type'] = function ($view, $client, $property) {
        $type = $client['Type'];
        // Some generic device types can be translated. There are several
        // spelling variants generated by different agent versions.
        switch (1) {
            case preg_match('/^DVD Writer$/', $type):
                $type = $view->translate('DVD writer');
                break;
            case preg_match('/^Fixed[x ]hard disk media$/', $type):
                $type = $view->translate('Hard disk');
                break;
            case preg_match('/^Removable [Mm]edia( other than[x ]floppy)?$/', $type):
                $type = $view->translate('Removable medium');
                break;
        }
        return $view->escapeHtml($type);
    };
} elseif ($client['Android']) {
    unset($headers['Device']);
    unset($headers['Firmware']);
    unset($headers['ProductFamily']);
    unset($headers['ProductName']);
    unset($headers['Serial']);
} else {
    // UNIX
    unset($headers['Type']); // not available
}

print $this->htmlElement(
    'h2',
    $this->translate('Storage devices')
);
print $this->table(
    $client['StorageDevice'],
    $headers,
    null,
    $renderCallbacks
);


// Display filesystemss

if ($client['Windows']) {
    $headers = array(
        'Letter' => $this->translate('Letter'),
        'Label' => $this->translate('Label'),
        'Type' => $this->translate('Type'),
        'Filesystem' => $this->translate('Filesystem'),
        'Size' => $this->translate('Size'),
        'UsedSpace' => $this->translate('Used space'),
        'FreeSpace' => $this->translate('Free space'),
    );
} else {
    $headers = array(
        'Mountpoint' => $this->translate('Mountpoint'),
        'Device' => $this->translate('Device'),
        'Filesystem' => $this->translate('Filesystem'),
        'CreationDate' => $this->translate('Creation date'),
        'Size' => $this->translate('Size'),
        'UsedSpace' => $this->translate('Used space'),
        'FreeSpace' => $this->translate('Free space'),
    );
    if ($client['Android']) {
        unset($headers['CreationDate']);
    }
}

$renderCallbacks = array(
    'Size' => $renderSize,
    'UsedSpace' => $renderSize,
    'FreeSpace' => $renderSize,
    'CreationDate' => function ($view, $filesystem) {
        $date = $filesystem['CreationDate'];
        if ($date) {
            return $view->escapeHtml($view->dateFormat($date, \IntlDateFormatter::MEDIUM));
        }
    }
);

print $this->htmlElement(
    'h2',
    $this->translate('Filesystems')
);
print $this->table(
    $client['Filesystem'],
    $headers,
    null,
    $renderCallbacks
);
